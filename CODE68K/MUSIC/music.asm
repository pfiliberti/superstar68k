
	RELATIVE
	ORG $80600
;
;-------------------------------------
;
;
; SuperStar Slot Music routines
; Applied Computer Technology
; Programmer: Francis Styck
; December 3, 1988
;
;
; A0 - VDEL1
; A1 - SONG	ADDRESS OF ADDRESS OF NOTE DATA
; A2 - VSTAT
; A3 - NOTES	POINT TO NOTE CONVERSION FOR CHIP
; A4 - SCRATCH
; A5 - SCRATCH
; A6 - (VOICE1) ADDRESS OF NOTE
; A7 - STACK POINTER, NOT USED HERE
;
; D0 - VOICE NUMBER
; D1 - VOICE NUMBER *4 FOR LONG OFFSETS
; D2 - SCRATCH
; D3 - SCRATCH
; D4 - VOICE NUMBER *2 FOR WORD OFFSETS
; D5 - SCRATCH
; D6 - NOT USED
; D7 - NOT USED
;
;-----------------------------------------------------------

SNDDAT	EQU	$100000 	; SOUND DATA REGISTER
SNDADD	EQU	$100002 	; SOUND ADDRESS REGISTER

;-----------------------------------------------------------
; OFFSETS INTO CHIP REGISTERS

VOL0	EQU	0	; VOLUME REGISTERS
VOL1	EQU	1
VOL2	EQU	2
VOL3	EQU	3
VOL4	EQU	4
VOL5	EQU	5
;-----------------------------------------------------------

NOTE0	EQU	8	; FREQUENCY REGISTERS
NOTE1	EQU	9
NOTE2	EQU	$A
NOTE3	EQU	$B
NOTE4	EQU	$C
NOTE5	EQU	$D
;-----------------------------------------------------------

OCTV0	EQU	$10	; OCTAVE REGISTERS
OCTV1	EQU	$10
OCTV2	EQU	$11
OCTV3	EQU	$11
OCTV4	EQU	$12
OCTV5	EQU	$12
;-----------------------------------------------------------

FENABLE EQU	$14		; FREQUENCY ENABLE
NENBLE0 EQU	$15		; NOISE ENABLE 0
NENBLE1 EQU	$16		; NOISE ENABLE 1

ENVLP0	EQU	$18		; ENVELOPE GENERATOR 0
ENVLP1	EQU	$19		; ENVELOPE GENERATOR 1

SNDENBL EQU	$1C		; SOUND ENABLE

;-----------------------------------------------------------
GUNSHOT

	BSR	ZEROVOL 		; ZERO ALL VOLUMES

	MOVE.B	#SNDENBL,SNDADD 	; ENABLE SOUND
	MOVE.B	#$01,SNDDAT

	MOVE.B	#NOTE1,SNDADD		; SET NOTE
	MOVE.B	#$00,SNDDAT
	MOVE.B	#NOTE2,SNDADD
	MOVE.B	#$0A,SNDDAT

	MOVE.B	#OCTV0,SNDADD		; SET OCTAVES
	MOVE.B	#$00,SNDDAT
	MOVE.B	#OCTV2,SNDADD
	MOVE.B	#$00,SNDDAT

	MOVE.B	#VOL1,SNDADD
	MOVE.B	#$FF,SNDDAT

	MOVE.B	#VOL2,SNDADD		; SET VOLUME FOR VOICE 2
	MOVE.B	#$FF,SNDDAT

	MOVE.B	#NENBLE0,SNDADD 	; ENABLE NOISE FOR VOICE 2
	MOVE.B	#$04,SNDDAT
	MOVE.B	#NENBLE1,SNDADD 	; SET TYPE OF NOISE
	MOVE.B	#$11,SNDDAT

	MOVE.B	#FENABLE,SNDADD 	; ENABLE FREQUENCY
	MOVE.B	#$00,SNDDAT

	MOVE.B	#ENVLP0,SNDADD		; SET THE ENVELOPE
	MOVE.B	#$84,SNDDAT

	MOVE.B	#FENABLE,SNDADD 	; ENABLE FREQUENCY
	MOVE.B	#$04,SNDDAT

	RTS


;-----------------------------------------------------------
INIT	MOVE.B	#SNDENBL,SNDADD ; ENABLE SOUND
	MOVE.B	#$01,SNDDAT

	MOVE.B	#NENBLE0,SNDADD  ; DISABLE NOISE
	MOVE.B	#$00,SNDDAT

	MOVE.B	#NENBLE1,SNDADD
	MOVE.B	#$00,SNDDAT

	BSR	ZEROVOL 		; ZERO ALL VOICES VOLUMES

	MOVE.B	#ENVLP0,SNDADD		; $84 - SINGLE DECAY
	MOVE.B	#$02,SNDDAT		; $86 - REPETITIVE DECAY
					; $9D - SINGLE ATTACK
					; $02 - NO ENVELOPE

;-----------------------------------------------------------

	MOVE.B	#OCTV0,SNDADD	; SET OCTAVE FOR VOICE1 (ENVELOPE)
	MOVE.B	#$10,SNDDAT

	MOVE.B	#OCTV2,SNDADD
	MOVE.B	#$01,SNDDAT

	MOVE.B	#NOTE1,SNDADD
	MOVE.B	#$3C,SNDDAT

;-----------------------------------------------------------
; MUST HAVE VDEL1,VDEL2,VDEL3,VSTAT ALL INITIALIZED ON FIRST ENTRY

	MOVE.W	#$01,VDEL0	; SET TO 1 SINCE WE DECREMENT 1ST
	MOVE.W	#$01,VDEL1
	MOVE.W	#$01,VDEL2
	MOVE.W	#$01,VDEL3
	MOVE.B	#$00,VSTAT	; ALL VOICES ACTIVE (SOURCE OF BUG)

;-----------------------------------------------------------
;  SELECT SONG TO PLAY (HARD CODED FOR SONG1)

	LEA	SONG1,A1	; ADDRESS OF ADDRESS OF NOTE DATA
	MOVE.L	(A1)+,VOICE0	; GET ADDRESS OF ADDRESS INTO ITS VARIABLE
	MOVE.L	(A1)+,VOICE1
	MOVE.L	(A1)+,VOICE2
	MOVE.L	(A1)+,VOICE3

	LEA	NOTES,A3	; POINT TO NOTES TO FREQUENCY TABLE

;-----------------------------------------------------------
;  MAIN LOOP

MUSIC	MOVE.L	#5,D0		; 6 VOICES
MUS1	MOVE.L	D0,D1		; CURRENT VOICE NUMBER IN D1
	ADD	D1,D1		; *2
	MOVE.W	D1,D4		; *2 FOR WORD OFFSET INTO TABLES
	ADD	D1,D1		; *4 FOR LONG OFFSET INTO TABLES

;-----------------------------------------------------------
; CHECK STATUS OF VOICE

	LEA	VSTAT,A2	; GET STATUS OF ALL VOICES
	BTST	D0,(A2) 	; CHECK STATUS OF CURRENT VOICE
	BNE	VCOFF		; IF BIT IS SET THEN DONE WITH VOICE
				; GOTO NEXT VOICE

;-----------------------------------------------------------
; DECREMENT DURATION OF VOICE

	LEA	VDEL0,A0	  ; GET ADDRESS OF DURATION FOR VOICE
	SUBI.W	#1,0(A0,D4.W)	  ; DECREMENT DURATION OF VOICE
	BEQ	NXTNTE		  ; IF ZERO GO PLAY ANOTHER NOTE
	CMPI.W	#$00FF,0(A0,D4.W) ; ELSE CHECK FOR DECAY VALUE
	BNE	VCOFF		  ; NOT DONE WITH THIS NOTE, GOTO NEXT VOICE

;-----------------------------------------------------------
; MUST BE TIME TO DECAY THE NOTE

	LEA	VOLTBL,A4	; TABLE OF VOLUME ADDRESSES FOR CHIP
	MOVE.L	#$08,D2
DLUP
	MOVE.L	D2,D5
	ASL	#4,D5
	OR.L	D2,D5		; VOLUME IN HIGH AND LOW NIBBLE FOR LEFT/RGHT
	MOVE.B	0(A4,D0),SNDADD ; GIVE VOLUME TO CHIP FOR VOICE WE ARE ON
	MOVE.B	D5,SNDDAT
	DBRA	D2,DLUP
	BRA	VCOFF		; NOT DONE YET CHECK NEXT VOICE

;-----------------------------------------------------------
; GET ADDRESS OF NOTES FOR THIS VOICE

NXTNTE
	LEA	VOICE0,A1	 ; ADDRESS OF ADDRESS OF DATA
	MOVE.L	0(A1,D1.W),A6	 ; GET ADDRESS OF DATA
	CMPI.W	#$FFFF,(A6)	 ; ARE WE AT THE END OF THE TABLE
	BNE	PLYVCE		 ; NO, GO PLAY THE NOTE

;-----------------------------------------------------------
; DONE WITH THIS VOICE, KILL VOICE

	LEA	VSTAT,A2	; END OF MUSIC FOR THIS VOICE
	BSET	D0,(A2) 	; SET THE BIT AND KILL THE VOICE
	BRA	VCOFF		; GO DO THE NEXT VOICE

;-----------------------------------------------------------
; GET THE NOTE AND PLAY IT, SET DURATION DEPENDING ON TYPE OF NOTE

PLYVCE
	MOVE.B	(A6)+,D2	; GET NOTE/OCTAVE
	MOVE.B	D2,D3		; SAVE
	ANDI.L	#$F0,D2
	ASR	#4,D2		; EXTRACT THE NOTE

;-----------------------------------------------------------
; GIVE NOTE TO FREQUENCY REGISTER

	LEA	NOTTBL,A4	; TABLE OF FREQ ADDRESSES FOR CHIP
	MOVE.B	0(A4,D0),SNDADD ; GIVE NOTE TO CHIP
	MOVE.B	0(A3,D2),SNDDAT
	ANDI.L	#$0F,D3
	BTST	#$00,D0 	; IF ODD VOICE THEN NEED TO SHIFT UP
	BEQ	NOTODD
	ASL	#4,D3		; MOVE TO UPPER NIBBLE
;-----------------------------------------------------------
; GIVE OCTAVE TO OCTAVE REGISTER

NOTODD
	LEA	OCTTBL,A4	; TABLE OF OCTAVE ADDRESSES FOR CHIP
	MOVE.B	0(A4,D0),SNDADD ; GIVE OCTAVE TO CHIP FOR VOICE WE ARE ON
	MOVE.B	D3,SNDDAT

;-----------------------------------------------------------
; GIVE VOLUME TO VOLUME LEFT AND VOLUME RIGHT REGISTER

	MOVE.B	(A6)+,D2	; GET VOLUME/DURATION
	MOVE.B	D2,D3		; SAVE
	ANDI.L	#$F0,D2
	MOVE.L	D2,D5
	ASR	#4,D2		; EXTRACT VOLUME
	OR.L	D5,D2		; VOLUME IN HIGH AND LOW NIBBLE FOR LEFT/RGHT
	LEA	VOLTBL,A4	; TABLE OF VOLUME ADDRESSES FOR CHIP
	MOVE.B	0(A4,D0),SNDADD ; GIVE VOLUME TO CHIP FOR VOICE WE ARE ON
	MOVE.B	D2,SNDDAT

;-----------------------------------------------------------
; ENABLE SOUND AND SET EVELOPE REGISTER

	MOVE.B	#FENABLE,SNDADD  ; ENABLE THE TONE
	MOVE.B	(A2),D5 	 ; GET VSTAT INTO D5
	NOT	D5		 ; NEGATE IT
	ANDI.W	#$000F,D5
;;;;;	ORI.W	#$0002,D5	 ; ENABLE ENVELOPE FREQUENCY IF USING IT
	MOVE.B	D5,SNDDAT	 ; VSTAT HAS WHICH VOICES ARE ACTIVE

;-----------------------------------------------------------

	MOVE.L	#$3FFF,D2	; BASE TIME FOR WHOLE NOTE
	MOVE.L	D3,D5		; SAVE DURATION IN D5
	ANDI.L	#$07,D3 	; GET THE DURATION (NOTE TYPE)
	CMPI.B	#$00,D3 	; IS DURATION ZERO
	BEQ	NOSFT		; YES, MUST BE A WHOLE NOTE, NO SHIFTING
;-----------------------------------------------------------
; CALCULATE DURATION VALUE DEPENDING ON NOTE TYPE

	LSR.L	D3,D2		; DIVIDE BASE TIME BY 2

;-----------------------------------------------------------
; HANDLE DOTTED NOTE, ADD IN HALF OF ITS VALUE TO ORIGINAL

NOSFT	BTST	#3,D5		; CHECK BIT 3 OR DURATION. IF SET THEN DOTTED
	BEQ	NODOT		; NOT A DOTTED NOTE
	MOVE.L	D2,D5		; SAVE DURATION DELAY IN D5
	ASR.L	D5		; DIVIDE BY 2 FOR DOTTED NOTES AND ADD
	ADD.L	D5,D2		; FINAL DURATION IN D2

NODOT	MOVE.W	D2,0(A0,D4.W)	 ; SAVE DURATION TIME FOR THIS VOICE
	MOVE.L	A6,0(A1,D1.W)	 ; SAVE INCREMENTED ADDRESS OF DATA

;-----------------------------------------------------------
; CHECK FOR TIED NOTES (NOT IMPLEMENTED)
;-----------------------------------------------------------

;-----------------------------------------------------------
; CHECK STATUS OF VOICES, IF NOT DONE GO TO NEXT VOICE

VCOFF	DBRA	D0,MUS1
	CMPI.B	#$0F,(A2)	; CHECK STATUS OF ALL VOICES
	BNE	MUSIC		; KEEP PLAYING RESECHUDLE INTERRUPT

;-----------------------------------------------------------
; ALL DONE, DISABLE SOUND

	MOVE.B	#SNDENBL,SNDADD ; DISABLE SOUND, WE ARE FINISHED
	MOVE.B	#$00,SNDDAT

	RTS


;-----------------------------------------------------------
;  ZERO VOLUME ON ALL VOICES

ZEROVOL
	MOVE.B	#VOL0,SNDADD	; SET ALL VOLUMES TO ZERO SINCE USING
	MOVE.B	#$00,SNDDAT	; VSTAT TO ENABLE THE FREQUENCY DOES NOT
	MOVE.B	#VOL1,SNDADD	; WORK CORRECTLY. WE END UP ENABLING
	MOVE.B	#$00,SNDDAT	; VOICES WE ARE NOT USING.  THIS HAPPENS
	MOVE.B	#VOL2,SNDADD	; WHEN LOOPING THROUGH THE VOICES THE 1ST
	MOVE.B	#$00,SNDDAT	; TIME.  SINCE THE VOICES THAT HAVENT BEEN
	MOVE.B	#VOL3,SNDADD	; DISABLE YET ARE STILL ACTIVE EVEN THOUGH
	MOVE.B	#$00,SNDDAT	; THEY ARE NOT USED.
	MOVE.B	#VOL4,SNDADD
	MOVE.B	#$00,SNDDAT
	MOVE.B	#VOL5,SNDADD
	MOVE.B	#$00,SNDDAT
	RTS


;-----------------------------------------------------------
;  HOLDS DURATION OF NOTES, DELAY VALUE

VDEL0	 DEFW	0
VDEL1	 DEFW	0
VDEL2	 DEFW	0
VDEL3	 DEFW	0
VDEL4	 DEFW	0
VDEL5	 DEFW	0

;-----------------------------------------------------------
;  HOLDS ADDRESS OF NOTES

VOICE0	LONG	0
VOICE1	LONG	0
VOICE2	LONG	0
VOICE3	LONG	0
VOICE4	LONG	0
VOICE5	LONG	0

;-----------------------------------------------------------
;  STATUS OF EACH VOICE (BIT ENCODED)

VSTAT	 DEFB	0

;-----------------------------------------------------------
;  TABLE OF SONGS (VOICE0 VOICE1 VOICE2 VOICE3)

SONG1	LONG CCSV0,CCSV1,CCSV2,CCSV3,CCSV4,CCSV5
SONG2	LONG SNGV0,SNGV1,SNGV2,SNGV3,SNGV4,SNGV5

;-----------------------------------------------------------
; TABLE OF REGISTER OFFSETS, NOTES VOLUMES AND OCTAVES

NOTTBL	DEFB	NOTE0,NOTE1,NOTE2,NOTE3,NOTE4,NOTE5
VOLTBL	DEFB	VOL0,VOL1,VOL2,VOL3,VOL4,VOL5
OCTTBL	DEFB	OCTV0,OCTV1,OCTV2,OCTV3,OCTV4,OCTV5

;-----------------------------------------------------------
; CONVERT NOTES TO VALUES FOR SIGNETICS CHIP

NOTES	DEFB	$21	; C
	DEFB	$3C	; C#
	DEFB	$55	; D
	DEFB	$6D	; D#
	DEFB	$84	; E
	DEFB	$99	; F
	DEFB	$AD	; F#
	DEFB	$C0	; G
	DEFB	$D2	; G#
	DEFB	$E3	; A
	DEFB	$F3	; A#
	DEFB	$05	; B

;-----------------------------------------------------------
;  SONG TABLES

CCSV0
;;;;	DEFW	$6005		;DELAY THIS VOICE WITH A REST
;;;;	INCLUDE VOICE1.HEX
	DEFW	$FFFF
CCSV1
	 DEFW	 $FFFF
CCSV2
	INCLUDE CALL2CLR.HEX
	DEFW	$FFFF
CCSV3
CCSV4
CCSV5
	DEFW	$FFFF

;-----------------------------------------------------------

SNGV0
;	INCLUDE VOICE2.HEX
SNGV1
SNGV4
SNGV5
	DEFW	$FFFF
SNGV2
;	INCLUDE VOICE3.HEX
SNGV3
;	INCLUDE VOICE4.HEX
	DEFW	$FFFF

;-----------------------------------------------------------

	END

